<?php

namespace Mcti\SisproBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EstructuraRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EstructuraRepository extends EntityRepository
{
    /*
     * Obtiene las Unidades inferiores a la Estructura dada
     * Incluyendola
     */
    public function getUnidadesInferiores(Estructura $estructura)
    {
       // Si se trata de la 1era Estructura (id=1)
       if ($estructura->getId()<3)
       {
            return $this->getEntityManager()
                        ->createQuery('SELECT e 
                                       FROM SisproBundle:Estructura e
                                       WHERE e.activo=TRUE
                                       ORDER BY e.id ASC')
                        ->getResult();
       }
       
       return $this->getEntityManager()
                    ->createQuery("SELECT e,o,s
                                   FROM SisproBundle:Estructura e
                                   JOIN e.superior o  
                                   JOIN o.superior s
                                   WHERE (o.id=:id
                                   OR s.id=:id
                                   OR e.id=:id )
                                   AND e.activo=TRUE
                                   AND o.activo=TRUE
                                   AND s.activo=TRUE
                                   ORDER BY e.id ASC")
                    ->setParameter('id', $estructura->getId())
                    ->getResult();
    }
    
    /*
     * Obtiene un array con las Unidades Inferiores a la Estructura dada
     */
    public function getArrayUnidadesInferiores($idEstructura)
    {
        $unidades=$this->getEntityManager()
                       ->createQuery("SELECT e, o, s, ss
                                      FROM SisproBundle:Estructura e
                                      JOIN e.superior o  
                                      JOIN o.superior s
                                      JOIN s.superior ss
                                      WHERE (o.id=:id
                                      OR s.id=:id
                                      OR ss.id=:id
                                      OR e.id=:id )
                                      AND e.activo=TRUE
                                      AND o.activo=TRUE
                                      AND s.activo=TRUE
                                      AND ss.activo=TRUE
                                      ORDER BY e.siglas ASC")
                       ->setParameter('id', $idEstructura)
                       ->getArrayResult();
       
        if (count($unidades)==0) return array('0'=>'');
        
        $a=array('0'); $b=array('[Seleccione]');
        
        foreach ($unidades as $fila)
        {
           array_push($a,$fila['id']);
           array_push($b,  mb_convert_case($fila['siglas'],MB_CASE_UPPER,'UTF-8').
                            ' - '.$fila['estructura']);
        }            
        $unidades=array_combine($a,$b); 
        return $unidades;       
    }    
    
}
