<?php

namespace Mcti\SisproBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * ProyectoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProyectoRepository extends EntityRepository
{
    /*
     * Obtiene Proyectos de las Unidades inferiores a la Estructura dada
     * Incluyendola
     */
    public function getProyectosUnidadesInferiores(Estructura $estructura)
    {
       // Si se trata de las dos 1eras Estructura (id<3)
       if ($estructura->getId()<3)
       {
            return $this->getEntityManager()
                        ->createQuery('SELECT p, e, c, es, obj, act, fu, mo, rr, rej, ma
                                       FROM SisproBundle:Proyecto p
                                       JOIN p.estructura e
                                       JOIN p.estatus es
                                       LEFT JOIN p.objetivos obj
                                       LEFT JOIN obj.actividades act
                                       LEFT JOIN act.recursoEjecutado rej
                                       LEFT JOIN act.metaAlcanzada ma
                                       LEFT JOIN act.moneda mo
                                       LEFT JOIN p.fuentes fu
                                       LEFT JOIN p.coordenadas c                                       
                                       LEFT JOIN p.recursoRecibido rr
                                       WHERE e.activo = TRUE
                                       ORDER BY e.id, p.id')
                        ->getResult();
       }
       
       return $this->getEntityManager()
                   ->createQuery("SELECT p, e, c, es, obj, act, fu, mo, rr, rej, ma
                                  FROM SisproBundle:Proyecto p 
                                  JOIN p.estructura e
                                  JOIN e.superior s  
                                  JOIN s.superior ss
                                  JOIN ss.superior sss
                                  JOIN p.estatus es
                                  LEFT JOIN p.objetivos obj
                                  LEFT JOIN obj.actividades act
                                  LEFT JOIN act.moneda mo
                                  LEFT JOIN act.recursoEjecutado rej
                                  LEFT JOIN act.metaAlcanzada ma
                                  LEFT JOIN p.fuentes fu
                                  LEFT JOIN p.coordenadas c
                                  LEFT JOIN p.recursoRecibido rr
                                  WHERE (e.id=:id
                                  OR s.id=:id
                                  OR ss.id=:id
                                  OR sss.id=:id)
                                  AND e.activo=TRUE
                                  AND s.activo=TRUE
                                  AND ss.activo=TRUE
                                  AND sss.activo=TRUE
                                  ORDER BY e.id, p.id")
                   ->setParameter('id', $estructura->getId())
                   ->getResult();       
       
    }
    
    // OBTENEMOS LOS PROYECTOS QUE LE PERTENECEN A UN USUARIO DADO
    public function getProyectosUsuario(Usuario $usuario)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT p, e, c, es, obj, act, fu, mo, rr, rej, ma
                                 FROM SisproBundle:Proyecto p
                                 JOIN p.estructura e
                                 JOIN p.estatus es
                                 JOIN p.usuario u
                                 LEFT JOIN p.objetivos obj
                                 LEFT JOIN obj.actividades act
                                 LEFT JOIN act.moneda mo
                                 LEFT JOIN act.recursoEjecutado rej
                                 LEFT JOIN act.metaAlcanzada ma
                                 LEFT JOIN p.fuentes fu
                                 LEFT JOIN p.coordenadas c
                                 LEFT JOIN p.recursoRecibido rr                      
                                 WHERE u =:user 
                                 ORDER BY e.id, p.id')
                  ->setParameter('user', $usuario)    
                  ->getResult();       
    }
    
    // OBTENEMOS LOS OBJETIVOS ESPECIFICOS Y ACTIVIDADES DE UN PROYECTO DADO
    public function getObjetivosProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT oe, a, m
                                  FROM SisproBundle:ObjetivoEspecifico oe
                                  LEFT JOIN oe.proyecto p
                                  LEFT JOIN oe.actividades a
                                  LEFT JOIN a.moneda m
                                  WHERE p.id = :proy
                                  ORDER BY oe.codigo, a.codigo')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }
    
    // OBTENEMOS TODAS LAS ACTIVIDADES DE UN PROYECTO DADO
    public function getActividadesProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT oe, a, mo, ma, re
                                 FROM SisproBundle:Actividad a
                                 JOIN a.objetivoEspecifico oe
                                 JOIN oe.proyecto p
                                 JOIN a.moneda mo
                                 LEFT JOIN a.metaAlcanzada ma
                                 LEFT JOIN a.recursoEjecutado re
                                 WHERE p.id = :proy
                                 ORDER BY oe.codigo, a.codigo')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }    
    
    // OBTENEMOS TODAS LAS ACTIVIDADES ORIGINALES DE UN PROYECTO DADO
    public function getActividadesOrgProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT a
                                 FROM SisproBundle:ActividadOrg a
                                 JOIN a.objetivoEspecificoOrg oe
                                 JOIN oe.proyecto p
                                 WHERE p.id = :proy
                                 ORDER BY oe.codigo, a.codigo')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }       
    
    // OBTENEMOS LOS OBJETIVOS ESPECIFICOS Y ACTIVIDADES ORIGINALES DE UN PROYECTO DADO
    public function getObjetivosOrgProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT oe, a, m
                                 FROM SisproBundle:ObjetivoEspecificoOrg oe
                                 LEFT JOIN oe.proyecto p
                                 LEFT JOIN oe.actividades a
                                 LEFT JOIN a.moneda m
                                 WHERE p.id = :proy
                                 ORDER BY oe.codigo, a.codigo')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }    

    // OBTENEMOS LOS RECURSOS RECIBIDOS DE UN PROYECTO DADO
    public function getRecursosRecibidosProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT rr,f,m,p
                                 FROM SisproBundle:RecursoRecibido rr
                                 JOIN rr.proyecto p
                                 JOIN rr.fuenteFinanciamiento f
                                 JOIN rr.moneda m                                  
                                 WHERE p.id = :proy
                                 ORDER BY rr.fecha ASC')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }
    
    // OBTENEMOS LOS RECURSOS EJECUTADOS DE UN PROYECTO DADO
    public function getRecursosEjecutadosProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT re,m,a,oe
                                 FROM SisproBundle:RecursoEjecutado re
                                 JOIN re.actividad a
                                 JOIN a.objetivoEspecifico oe
                                 JOIN oe.proyecto p
                                 JOIN re.moneda m                                  
                                 WHERE p.id = :proy
                                 ORDER BY re.fecha ASC')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }  
    
    // OBTENEMOS LOS REGISTROS DE PROBLEMAS DE UN PROYECTO DADO
    public function getRegistrosProblemasProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT rp, p, tp
                                 FROM SisproBundle:RegistroProblema rp
                                 JOIN rp.proyecto p
                                 JOIN rp.tipoProblema tp
                                 WHERE p.id = :proy
                                 ORDER BY rp.fecha ASC')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }  
    
    // OBTENEMOS LOS REGISTROS DE METAS ALCANZADAS DE UN PROYECTO DADO
    public function getMetasAlcanzadasProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT ma, a, oe, p
                                 FROM SisproBundle:MetaAlcanzada ma
                                 JOIN ma.actividad a
                                 JOIN a.objetivoEspecifico oe
                                 JOIN oe.proyecto p
                                 WHERE p.id = :proy
                                 ORDER BY ma.fecha ASC')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }  
    
    // OBTENEMOS LOS REGISTROS FOTOGRAFICOS DE UN PROYECTO DADO
    public function getFotografiasProyecto(Proyecto $proyecto)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT p, oe, a, f
                                 FROM SisproBundle:Fotografia f
                                 JOIN f.actividad a
                                 JOIN a.objetivoEspecifico oe
                                 JOIN oe.proyecto p
                                 WHERE p.id = :proy
                                 ORDER BY oe.codigo, a.codigo, a.id')
                  ->setParameter('proy', $proyecto->getId())    
                  ->getResult();       
    }      
    
   // OBTENEMOS TODOS LOS MARCOS CON LOS DEL PROYECTO SEGUN SU ID
    public function getMarcosProyecto($idProyecto)
    {             
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('SisproBundle:Marco', 'm');
        $rsm->addFieldResult('m', 'id', 'id');
        $rsm->addFieldResult('m', 'marco', 'marco');
        $rsm->addJoinedEntityResult('SisproBundle:ProyectoMarco' , 'r', 'm', 'proyectos');        
        $rsm->addFieldResult('r', 'codigo', 'codigo');
        $rsm->addFieldResult('r', 'year', 'year');        

        $sql = 'SELECT m.id, m.marco, r.codigo, r.year, r.id as r_id 
                FROM marco m
                LEFT JOIN (SELECT * FROM proyecto_marco
                           WHERE proyecto_id=:proy
                           ORDER BY marco_id) r on r.marco_id=m.id
                ORDER BY m.id';
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('proy', $idProyecto);

        return $query->getArrayResult();
    }
    
    // OBTENEMOS TODAS LAS FUENTES DE FINANCIAMIENTO CON LAS DEL PROYECTO SEGUN SU ID
    public function getFuentesFinanciamientoProyecto($idProyecto)
    {             
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('SisproBundle:FuenteFinanciamiento', 'ff');        
        $rsm->addFieldResult('ff', 'id', 'id');
        $rsm->addFieldResult('ff', 'fuente', 'fuente');
        $rsm->addJoinedEntityResult('SisproBundle:ProyectoFuenteFinanciamiento' , 
                                    'pff', 'ff', 'proyectos');        
        $rsm->addFieldResult('pff', 'monto', 'monto'); 
        $rsm->addJoinedEntityResult('SisproBundle:Moneda' , 
                                    'm', 'pff', 'moneda'); 
        $rsm->addFieldResult('m', 'moneda_id', 'id');
        $rsm->addFieldResult('m', 'moneda', 'moneda');
        $rsm->addFieldResult('m', 'moneda', 'moneda');
        $rsm->addFieldResult('m', 'precio_bs', 'precioBs');        
        $rsm->addFieldResult('m', 'iso', 'iso');        
        $rsm->addFieldResult('m', 'simbolo', 'simbolo');   

        $sql='SELECT ff.id, ff.fuente, r.monto, r.moneda_id, r.moneda,
                     r.iso, r.precio_bs, r.simbolo
              FROM fuente_financiamiento ff
              LEFT JOIN (SELECT * FROM proyecto_fuente_financiamiento pff
                         JOIN moneda m on pff.moneda_id = m.id
                         WHERE proyecto_id=:proy
                         ORDER BY fuente_financiamiento_id) r on r.fuente_financiamiento_id=ff.id        
              ORDER BY ff.id';
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('proy', $idProyecto);

        return $query->getArrayResult();
    }    
    
    // OBTENEMOS LOS TIPOS DE PROYECTO DE UN ID PROYECTO DADO
    public function getTiposProyecto($idProyecto)
    {             
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('SisproBundle:TipoProyecto', 't');
        $rsm->addFieldResult('t', 'id', 'id');
        $rsm->addFieldResult('t', 'tipo', 'tipo');  
        $rsm->addJoinedEntityResult('SisproBundle:Proyecto' , 'r', 't', 'proyecto');  
        $rsm->addFieldResult('r', 'proyecto', 'id'); 
        
        $sql = 'SELECT t.id, t.tipo, r.id as proyecto
                FROM tipo_proyecto t
                LEFT JOIN (SELECT p.*, r.* FROM proyecto_tipo_proyecto r
                           JOIN proyecto p on p.id = r.proyecto_id
                           WHERE p.id=:proy) r on r.tipo_proyecto_id=t.id
                ORDER BY t.id';
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('proy', $idProyecto);

        return $query->getArrayResult();
    }     
    
    // OBTENEMOS LOS LINEAMIENTOS PNSB DE UN ID PROYECTO DADO
    public function getPnsbProyecto($idProyecto)
    {             
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('SisproBundle:Pnsb', 'l');
        $rsm->addFieldResult('l', 'id', 'id');
        $rsm->addFieldResult('l', 'lineamiento', 'lineamiento');  
        $rsm->addFieldResult('l', 'definicion', 'definicion');  
        $rsm->addJoinedEntityResult('SisproBundle:Proyecto' , 'r', 'l', 'proyecto');  
        $rsm->addFieldResult('r', 'proyecto', 'id'); 
        
        $sql = 'SELECT l.id, l.lineamiento, l.definicion, r.id as proyecto
                FROM pnsb l
                LEFT JOIN (SELECT p.*, r.* FROM proyecto_pnsb r
                           JOIN proyecto p on p.id = r.proyecto_id
                           WHERE p.id=:proy) r on r.pnsb_id=l.id
                ORDER BY l.id';
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('proy', $idProyecto);

        return $query->getArrayResult();
    }     
    
    // OBTENEMOS LAS ÁREAS ESTRATÉGICAS DE INVESTIGACION DE UN ID PROYECTO DADO
    public function getAreaEstrategicaProyecto($idProyecto)
    {             
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('SisproBundle:AreaEstrategica', 'l');
        $rsm->addFieldResult('l', 'id', 'id');
        $rsm->addFieldResult('l', 'area', 'area');  
        $rsm->addFieldResult('l', 'definicion', 'definicion');  
        $rsm->addJoinedEntityResult('SisproBundle:Proyecto' , 'r', 'l', 'proyecto');  
        $rsm->addFieldResult('r', 'proyecto', 'id'); 
        
        $sql = 'SELECT l.id, l.area, l.definicion, r.id as proyecto
                FROM area_estrategica l
                LEFT JOIN (SELECT p.*, r.* FROM proyecto_area_estrategica r
                           JOIN proyecto p on p.id = r.proyecto_id
                           WHERE p.id=:proy) r on r.area_estrategica_id=l.id
                ORDER BY l.id';
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('proy', $idProyecto);

        return $query->getArrayResult();
    } 
    
    // OBTENEMOS LOS OBJETIVOS DEL PLAN DE LA PATRIA DE UN ID PROYECTO DADO
    public function getPlanPatriaProyecto($idProyecto)
    {             
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('SisproBundle:PlanPatriaOe', 'oe');
        $rsm->addFieldResult('oe', 'id', 'id');
        $rsm->addFieldResult('oe', 'codigo', 'codigo');
        $rsm->addFieldResult('oe', 'objetivo_estrategico', 'objetivoEstrategico');  
        $rsm->addJoinedEntityResult('SisproBundle:PlanPatriaOn', 'ona', 'oe', 'objnac');          
        $rsm->addFieldResult('ona', 'onid', 'id');  
        $rsm->addFieldResult('ona', 'codona', 'codigo');  
        $rsm->addFieldResult('ona', 'objetivo_nacional', 'objetivoNacional');  
        $rsm->addJoinedEntityResult('SisproBundle:Proyecto', 'r', 'ona', 'proyecto');  
        $rsm->addFieldResult('r', 'proyecto', 'id'); 
        
        $sql="SELECT oe.id, oe.codigo, oe.objetivo_estrategico, 
                     ona.id as onid, ona.codigo as codona, ona.objetivo_nacional, 
                     r.id as proyecto
                     FROM plan_patria_oe oe
                     JOIN plan_patria_on ona on ona.oe_id = oe.id
                     LEFT JOIN (SELECT p.*, r.* FROM proyecto_plan_patria r
                                JOIN proyecto p on p.id = r.proyecto_id
                                WHERE p.id=:proy) r on r.on_id = ona.id        
                     ORDER BY oe.id, ona.id";        
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('proy', $idProyecto);

        return $query->getArrayResult();
    }
    
    // OBTENEMOS EL ESTATUS DE EJECUCION DE UN PROYECTO SEGUN ANALISIS
    public function getAnalisisEjecucion(Proyecto $proyecto)
    {
        $fechaActual = new \DateTime('today'); // OBTENEMOS LA FECHA ACTUAL
        $fechaPlazo = new \DateTime('today'); // OBTENEMOS LA FECHA ACTUAL
        $fechaPlazo->sub(new \DateInterval('P30D') ); // FECHA DE HACE 30 DÍAS
        
        // OBTENEMOS LAS ACTIVIDADES EN ESTADO DE 'WARNING': AQUELLAS QUE HACE MENOS DE 30 DÍAS
        // DEBIERON HABER CULMINADO
        $actividadesWarning = $this->getEntityManager()
                                   ->createQuery('SELECT a, oe, p
                                                  FROM SisproBundle:Actividad a                                 
                                                  JOIN a.objetivoEspecifico oe
                                                  JOIN oe.proyecto p                                                  
                                                  WHERE p.id = :proy                                                   
                                                  AND a.fechaFin <= :fechaActual
                                                  AND a.fechaFin >= :fechaPlazo
                                                  ORDER BY a.fechaFin ASC')
                                   ->setParameters(array('proy' => $proyecto->getId(),
                                                  'fechaActual' => $fechaActual,
                                                   'fechaPlazo' => $fechaPlazo ))                                   
                                   ->getResult(); 
        
        // OBTENEMOS LAS ACTIVIDADES EN ESTADO DE 'ALARM': AQUELLAS QUE HACE MAS DE 30 DÍAS
        // DEBIERON HABER CULMINADO
        $actividadesAlarm = $this->getEntityManager()
                                 ->createQuery('SELECT a, oe, p
                                                FROM SisproBundle:Actividad a                                 
                                                JOIN a.objetivoEspecifico oe
                                                JOIN oe.proyecto p
                                                WHERE p.id = :proy                                                
                                                AND a.fechaFin < :fechaPlazo
                                                ORDER BY a.fechaFin ASC')
                                 ->setParameters(array('proy' => $proyecto->getId(),                                                
                                                 'fechaPlazo' => $fechaPlazo ))                                   
                                 ->getResult(); 
        
        // VERIFICAMOS CUANTAS ACTIVIDADES EN WARNING NO TIENEN REGISTRO DE META ALCANZADA
        $cuentaWarning = 0;
        foreach($actividadesWarning as $a)
        {
            if (count($a->getMetaAlcanzada()) == 0)
            $cuentaWarning++;            
        }
        
        $estado = ($cuentaWarning > 0)?1:0;               
        
        $cuentaAlarm = 0;
        // VERIFICAMOS CUANTAS ACTIVIDADES EN ALARM NO TIENEN REGISTRO DE META ALCANZADA
        foreach($actividadesAlarm as $a)
        {
            if (count($a->getMetaAlcanzada()) == 0)
            $cuentaAlarm++;            
        }
        
        $estado = ($cuentaAlarm > 0)?2:$estado;
                
        $cuentaTotal = $cuentaAlarm + $cuentaWarning;
        
        switch($cuentaTotal)
        {
            case 0: $mensaje = '';
                    break;
            case 1: $mensaje = "$cuentaTotal actividad pendiente por ".
                               "registro de ejecución de Meta Física.";
                    break;
          default : $mensaje = "$cuentaTotal actividades pendientes por ".
                               "registro de ejecución de Meta Física.";
                    break;          
        }
                
        return array('estado'=>$estado,'mensaje'=>$mensaje);
    }

    /*
     * OBTENEMOS LOS PROYECTOS CON ESTATUS ENTRE 2 Y 4, CUYAS ACTIVIDADES
     * DEBERÍAN TENER REGISTRADAS METAS ALCANZADAS Y QUE NO SE LES HAYA 
     * ENVIADO EMAIL DE NOTIFICACIÓN DESDE HACE MAS DE N DÍAS
     */    
    public function getProyectosRetrasados()
    {   
        $n = 7; // DIAS DESDE LA ULTIMA NOTIFICACION
        $hoy = new \DateTime('today');
        $haceNd = new \DateTime('today');
        $haceNd->sub(new \DateInterval('P'.$n.'D')); //RESTAMOS N DIAS AL ACTUAL
        
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('SisproBundle:Proyecto', 'p');
        $rsm->addFieldResult('p', 'id', 'id'); 

        $sql = 'SELECT p.id
                FROM proyecto p
                JOIN estatus e on e.id=p.estatus_id
                JOIN objetivo_especifico oe on oe.proyecto_id=p.id
                JOIN actividad a on a.objetivo_especifico_id=oe.id
                LEFT JOIN meta_alcanzada ma on a.id=ma.actividad_id
                LEFT JOIN (SELECT rn.proyecto_id, MAX(rn.fecha) as fecha
                           FROM registro_notificacion rn
                           GROUP BY rn.proyecto_id
                           ORDER BY rn.proyecto_id) rn on rn.proyecto_id=p.id
                WHERE e.id >= 2
                AND e.id <= 4
                AND a.fecha_fin <= :hoy
                AND ma IS NULL
                AND (rn.fecha <= :haceNd OR rn IS NULL)
                GROUP BY p.id
                ORDER BY p.id';        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters(array('hoy'=> $hoy,
                                 'haceNd'=> $haceNd));

        return $query->getArrayResult();
    }
    
    /*
     * OBTENEMOS LOS PROYECTOS HIDRATADOS CON DATOS DE LA ESTRUCTURA,
     * USUARIO RESPONSABLE Y USUARIOS ENLACE
     * CON LAS IDs SUMINISTRADAS
     */
    public function getProyectosHidratados($donde)
    {
      return $this->getEntityManager()
                  ->createQuery('SELECT p, u, e, eu
                                 FROM SisproBundle:Proyecto p
                                 JOIN p.usuario u
                                 JOIN p.estructura e
                                 LEFT JOIN e.usuarios eu
                                 LEFT JOIN eu.role ru                                  
                                 WHERE ('.$donde.')
                                 AND ru.id = 3  
                                 ORDER BY p.id ASC')                  
                  ->getResult();
    }      
}
